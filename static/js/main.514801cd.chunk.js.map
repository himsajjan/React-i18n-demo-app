{"version":3,"sources":["components/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","local","navigator","language","split","supportedMessages","fr","French","en","English","de","German","Wrapper","props","useState","locale","setLocale","selectedMessage","setMessages","Provider","value","selectLanguage","e","newLocale","target","messages","children","App","context","useContext","className","id","onChange","Date","hour","minute","second","timeZoneName","map","update","class","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+6IAMaA,EAAUC,IAAMC,gBAEvBC,EAAQC,UAAUC,SAASC,MAAM,QAAQ,GAEzCC,EAAoB,CACxBC,GAAIC,EACJC,GAAIC,EACJC,GAAIC,GAEAR,EAAWD,UAAUC,SAASC,MAAM,QAAQ,GAsBnCQ,EApBC,SAACC,GAAW,IAAD,EACGC,mBAASX,GADZ,mBAClBY,EADkB,KACVC,EADU,OAGcF,mBAAST,EAAkBJ,IAHzC,mBAGlBgB,EAHkB,KAGDC,EAHC,KAWzB,OACE,kBAACpB,EAAQqB,SAAT,CAAkBC,MAAO,CAAEL,SAAQM,eAPrC,SAAwBC,GACtB,IAAMC,EAAYD,EAAEE,OAAOJ,MAC3BJ,EAAUO,GACVL,EAAYb,EAAkBkB,OAK5B,kBAAC,IAAD,CAAcE,SAAUR,EAAiBF,OAAQA,GAC9CF,EAAMa,YCuBAC,MAjDf,WACE,IAAMC,EAAUC,qBAAW/B,GAG3B,OACE,yBAAKgC,UAAU,OACb,4BAAQA,UAAU,cAChB,4BACE,kBAAC,IAAD,CAAkBC,GAAG,gBAEvB,4BAAQX,MAAOQ,EAAQb,OAAQiB,SAAUJ,EAAQP,gBAC/C,4BAAQD,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,UACA,4BAAQA,MAAM,MAAd,WAEF,2BACE,kBAAC,IAAD,CACEA,MAAO,IAAIa,KACXC,KAAK,UACLC,OAAO,UACPC,OAAO,UACPC,aAAa,WAInB,yBAAKP,UAAU,WACb,wBAAIA,UAAU,iBACZ,kBAAC,IAAD,CAAkBC,GAAE,uBAA2B,KAzBvC,CAAC,EAAG,EAAG,EAAG,GA2BXO,KAAI,SAACC,GAAD,OACX,yBAAKT,UAAU,UACb,yBAAKU,MAAM,eACT,kBAAC,IAAD,CAAeT,GAAE,qBAAgBQ,EAAhB,YAEnB,yBAAKC,MAAM,kBACT,yBAAKV,UAAU,SACb,kBAAC,IAAD,CAAkBC,GAAE,qBAAgBQ,EAAhB,aAEtB,yBAAKT,UAAU,UACb,kBAAC,IAAD,CAAkBC,GAAE,qBAAgBQ,EAAhB,sBChChBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmB/C,WACrBA,UAAUgD,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.514801cd.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { IntlProvider } from \"react-intl\";\nimport French from \"../lang/fr.json\";\nimport English from \"../lang/en.json\";\nimport German from \"../lang/de.json\";\n\nexport const Context = React.createContext();\n\nconst local = navigator.language.split(/[-_]/)[0];\n\nconst supportedMessages = {\n  fr: French,\n  en: English,\n  de: German,\n};\nconst language = navigator.language.split(/[-_]/)[0];\n\nconst Wrapper = (props) => {\n  const [locale, setLocale] = useState(language);\n\n  const [selectedMessage, setMessages] = useState(supportedMessages[local]);\n\n  function selectLanguage(e) {\n    const newLocale = e.target.value;\n    setLocale(newLocale);\n    setMessages(supportedMessages[newLocale]);\n  }\n\n  return (\n    <Context.Provider value={{ locale, selectLanguage }}>\n      <IntlProvider messages={selectedMessage} locale={locale}>\n        {props.children}\n      </IntlProvider>\n    </Context.Provider>\n  );\n};\n\nexport default Wrapper;\n","import React, { useContext } from \"react\";\nimport \"./App.css\";\nimport { FormattedMessage, FormattedDate, FormattedTime } from \"react-intl\";\nimport { Context } from \"./components/Wrapper\";\n\nfunction App() {\n  const context = useContext(Context);\n  const updates = [1, 2, 3, 4];\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>\n          <FormattedMessage id=\"app.header\" />\n        </h2>\n        <select value={context.locale} onChange={context.selectLanguage}>\n          <option value=\"en\">English</option>\n          <option value=\"fr\">French</option>\n          <option value=\"de\">German</option>\n        </select>\n        <p>\n          <FormattedTime\n            value={new Date()}\n            hour=\"numeric\"\n            minute=\"numeric\"\n            second=\"numeric\"\n            timeZoneName=\"long\"\n          />\n        </p>\n      </header>\n      <div className=\"updates\">\n        <h1 className=\"update_header\">\n          <FormattedMessage id={`app.updates.header`} />{\" \"}\n        </h1>\n        {updates.map((update) => (\n          <div className=\"update\">\n            <div class=\"update_date\">\n              <FormattedDate id={`app.update_${update}.date`} />\n            </div>\n            <div class=\"update_details\">\n              <div className=\"title\">\n                <FormattedMessage id={`app.update_${update}.title`} />\n              </div>\n              <div className=\"detail\">\n                <FormattedMessage id={`app.update_${update}.detail`} />\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Wrapper from \"./components/Wrapper\";\n\nReactDOM.render(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}